variable "azs" {
 type        = list(string)
 description = "Availability Zones"
 default     = ["us-east-1a", "us-east-1b","us-east-1c"]
}

variable "subnet_cidrs" {
 type        = list(string)
 description = "Subnet CIDR values"
 default     = ["172.31.0.0/24", "172.31.2.0/24", "172.31.3.0/24"]
}

# Create a VPC
resource "aws_vpc" "main" {
  cidr_block = "172.31.0.0/16" # Replace with your desired CIDR block

  # Set the immutable metadata tag for "purpose"
  tags = {
    immutable_metadata="{\"purpose\":\"spin-vpc\"}"
  }
}

resource "aws_subnet" "main" {
  count      = length(var.subnet_cidrs)
  vpc_id     = aws_vpc.main.id
  #cidr_block = "172.31.32.0/24" # Replace with your desired CIDR block
  cidr_block = element(var.subnet_cidrs, count.index)
  availability_zone = element(var.azs, count.index)

  # Set the immutable metadata tag for "purpose"
  tags = {
    immutable_metadata="{\"purpose\":\"spin-subnet\"}"
  }
}

# Create a Default Security Group
resource "aws_security_group" "default" {
  name   = "spin-security-group"
  vpc_id = aws_vpc.main.id

  # Allow inbound traffic from anywhere on port 22 (SSH)
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Allow outbound traffic to anywhere
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Set the immutable metadata tag for "purpose"
  tags = {
    immutable_metadata="{\"purpose\":\"spin-security-group\"}"
  }
}

resource "aws_internet_gateway" "gw" {
 vpc_id = aws_vpc.main.id
 
 tags = {
   Name = "Spin terraform"
 }
}
################################################################
# Create LB and target group

resource "aws_lb" "application" { 
  load_balancer_type = "application"
  name           = "spin-app-lb"
  internal       = false
  #subnets        = [ "${aws_subnet.main.id}" ]
  subnets        = [for subnet in aws_subnet.main : subnet.id]
  security_groups = [ "${aws_security_group.default.id}" ]
}

resource "aws_lb_target_group" "classic_tg" {
  name        = "spin-classic-tg"
  port        = 80
  protocol    = "HTTP"
  vpc_id     = aws_vpc.main.id 
  target_type = "instance"
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.application.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.classic_tg.arn
  }
}

################################################################
# Output the load balancer DNS name
output "lb_dns_name" {
  value = aws_lb.application.dns_name
}

# Output the VPC, Subnet, and Security Group IDs
output "vpc_id" {
  value = aws_vpc.main.id
}

#output "subnet_id" {
#  value = aws_subnet.main.id
#}

output "security_group_id" {
  value = aws_security_group.default.id
}


